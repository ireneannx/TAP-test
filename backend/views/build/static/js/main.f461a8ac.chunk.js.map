{"version":3,"sources":["Login-Signup Frontend/authaction.js","history.js","loading.js","images/code-loader.gif","App.js","serviceWorker.js","utility/setAuthToken.js","Jobs/jobreducer.js","Feeds/reducers/feedReducer.js","Login-Signup Frontend/authreducer.js","ResumeBuilder/resumeReducer.js","UserProfile/userReducer.js","rootReducer.js","index.js"],"names":["changeAuth","authData","history","dispatch","a","email","password","axios","post","then","res","decode","jwt_decode","data","token","localStorage","setItem","type","payload","status","push","catch","changeAuthValue","createBrowserHistory","Loading","style","textAlign","justifyContent","src","loading","alt","width","height","marginTop","objectFit","borderRadius","module","exports","SignUpForm","lazy","UserApp","NotFound","ProtectedRoute","Component","component","isLoggedIn","render","to","pathname","App","state","Fragment","fallback","exact","path","this","props","Auth","connect","Boolean","window","location","hostname","match","setAuthToken","defaults","headers","common","initialState","jobs","isLoaded","feeds","Feed","action","personalDetails","employment","skills","education","summary","references","Resume","userProfile","combineReducers","jobreducer","map","_id","JobId","upvote_count","UserId","middleware","ReduxThunk","save","store","createStore","rootReducer","load","composeWithDevTools","applyMiddleware","thsToken","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f461a8ac.chunk.js","sourcesContent":["import jwt_decode from 'jwt-decode'\r\nimport axios from 'axios';\r\n\r\nexport const CHANGE_AUTH = 'CHANGE_AUTH'\r\n\r\nexport const changeAuth = (authData, history) => async dispatch => {\r\n\r\n    if (authData.email !== '' && authData.password !== \"\") {\r\n        await axios.post(\"/api/auth\", authData)\r\n            .then((res) => {\r\n\r\n                const decode = jwt_decode(res.data.token)\r\n                localStorage.setItem(\"thsToken\", res.data.token);\r\n                dispatch({\r\n                    type: CHANGE_AUTH,\r\n                    payload: decode\r\n                })\r\n                if (res.status === 200) {\r\n                    history.push('/user/posts')\r\n                }\r\n            })\r\n            .catch()\r\n    }\r\n}\r\n\r\nexport function changeAuthValue() {\r\n    return {\r\n        type: 'CHANGE_AUTH_STATE',\r\n    }\r\n}","// history.js\r\nimport { createBrowserHistory } from \"history\";\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport loading from './images/code-loader.gif';\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div style={{textAlign: 'center', justifyContent: 'center'}}>\r\n            <img src={loading} alt=\"Loading...\" style={{width: '200px', height: '200px', marginTop: '20%', objectFit: 'cover', borderRadius: '50%'}}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading","module.exports = __webpack_public_path__ + \"static/media/code-loader.47c4d421.gif\";","import React, { Component, Suspense, lazy } from 'react';\r\nimport './App.css';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport { changeAuth } from './Login-Signup Frontend/authaction'\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n// import SignUpForm from './Login-Signup Frontend/components/StartPage'\r\n// import UserApp from './UserApp'\r\nimport Loading from './loading';\r\n\r\nconst SignUpForm = lazy(() => import('./Login-Signup Frontend/components/StartPage'));\r\nconst UserApp = lazy(() => import('./UserApp'));\r\nconst NotFound = lazy(() => import('./NotFound'));\r\n\r\n\r\n//auth components\r\n\r\nconst ProtectedRoute = ({ component: Component, isLoggedIn }) => {\r\n\r\n  return <Route\r\n    render={() => isLoggedIn === true ?\r\n      <Component />\r\n      :\r\n      <Redirect to={{ pathname: '/' }} />\r\n    }\r\n  />\r\n}\r\n\r\nclass App extends Component {\r\n  state = {}\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <React.Fragment>\r\n\r\n          <Suspense fallback={<Loading />}>\r\n            <Switch>\r\n              <Route exact path=\"/\" component={SignUpForm} />\r\n\r\n              {/* <Route path=\"/user\" component={UserApp} /> */}\r\n              <ProtectedRoute path='/user' isLoggedIn={this.props.Auth.isLoggedIn} component={UserApp} />\r\n              <Route path=\"*\" component={NotFound} />\r\n            </Switch>\r\n          </Suspense>\r\n\r\n        </React.Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// const mapDispatchToProps = (dispatch) => bindActionCreators({\r\n//   changeAuth\r\n// }, dispatch)\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    Auth: state.Auth\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import axios from 'axios';\r\n\r\nconst setAuthToken = (token) => {\r\n    if (token) {\r\n        axios.defaults.headers.common['Authorization'] = token;\r\n    } else {\r\n        delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n}\r\n\r\nexport default setAuthToken;","const initialState = {\r\n  jobs: [],\r\n  isLoaded: false\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"GET_JOBS\":\r\n      return {\r\n        ...state, jobs: action.payload, isLoaded: true\r\n      }\r\n    case \"ADD_ID_TO_JOB\":\r\n        return {\r\n        ...state, jobs: state.jobs.map((data) => {\r\n          if (data._id === action.JobId) {\r\n            data.upvote_count.push(action.UserId)\r\n          }\r\n          return data\r\n        })\r\n      }\r\n    //case ADD_JOB isnt needed since i dont need to change anything in my redux store when I add a job. get jobs will take care of that when the jobs component rerenders \r\n    default:\r\n      return { ...state }\r\n  }\r\n}","const initialState = {\r\n    feeds: [],\r\n}\r\n\r\n// console.log('from feedReducer', initialState)\r\n\r\nconst Feed = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET':\r\n            return { ...state, feeds: action.payload }\r\n        case 'ADD':\r\n            return { ...state, feeds: [action.payload, ...state.feeds]}\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default Feed","const initialState = {\r\n  isLoggedIn: false,\r\n  authData: {}\r\n}\r\n\r\n\r\nconst Auth = function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case \"CHANGE_AUTH\":\r\n      return {\r\n        ...state, authData: action.payload, isLoggedIn: true\r\n      }\r\n    case \"CHANGE_AUTH_STATE\":\r\n      return {\r\n        ...state, isLoggedIn: false\r\n      }\r\n    default:\r\n      return { ...state }\r\n  }\r\n}\r\n\r\nexport default Auth","const initialState = {\r\n    personalDetails: [],\r\n    employment: [],\r\n    skills: [],\r\n    education: [],\r\n    summary: [],\r\n    references: []\r\n}\r\n\r\nconst Resume = function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case \"ADD_PERSONAL_FIELD\":\r\n            return {\r\n                ...state, personalDetails: action.payload\r\n            }\r\n        case \"ADD_EMPLOYMENT_FIELD\":\r\n            return {\r\n                ...state, employment: action.payload\r\n            }\r\n        case \"ADD_SKILLS_FIELD\":\r\n            return {\r\n                ...state, skills: action.payload\r\n            }\r\n        case \"ADD_EDUCATION_FIELD\":\r\n            return {\r\n                ...state, education: action.payload\r\n            }\r\n        case \"ADD_SUMMARY_FIELD\":\r\n            return {\r\n                ...state, summary: action.payload\r\n            }\r\n        case \"ADD_REFERENCES_FIELD\":\r\n            return {\r\n                ...state, references: action.payload\r\n            }\r\n        case \"RESET_RESUME\":\r\n            return {\r\n                ...state,\r\n                personalDetails: [],\r\n                employment: [],\r\n                skills: [],\r\n                education: [],\r\n                summary: [],\r\n                references: []\r\n            }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport default Resume","const initialState = {\n    userProfile: []\n}\n\nconst userProfile = function (state = initialState, action) {\n    switch (action.type) {\n        case \"ADD_USER_DETAILS\":\n            return {\n                ...state, userProfile: action.payload\n            }\n        default:\n            return { ...state }\n    }\n}\n\nexport default userProfile","import { combineReducers } from 'redux';\r\n\r\n//all reducers coming from various files\r\nimport jobreducer from './Jobs/jobreducer';\r\nimport Feed from './Feeds/reducers/feedReducer';\r\nimport Auth from './Login-Signup Frontend/authreducer';\r\nimport Resume from './ResumeBuilder/resumeReducer';\r\nimport userProfile from './UserProfile/userReducer';\r\n\r\nexport default combineReducers({\r\n  jobreducer,\r\n  Feed,\r\n  Auth,\r\n  Resume,\r\n  userProfile\r\n})\r\n\r\n","import React from \"react\";\r\nimport history from \"./history\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"../node_modules/draft-js-emoji-plugin/lib/plugin.css\";\r\nimport \"../node_modules/draft-js-inline-toolbar-plugin/lib/plugin.css\";\r\nimport setAuthToken from \"./utility/setAuthToken\";\r\nimport { changeAuth } from \"./Login-Signup Frontend/authaction\";\r\nimport { save, load } from \"redux-localstorage-simple\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport { Router } from \"react-router-dom\"; //for routing\r\n// import logger from 'redux-logger';\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport jwt_decode from \"jwt-decode\";\r\nconst middleware = [ ReduxThunk, save()];\r\n\r\n//store part\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  load(), //state will be rendered here\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nif (localStorage.thsToken) {\r\n  setAuthToken(localStorage.thsToken);\r\n  const decode = jwt_decode(localStorage.thsToken);\r\n  // console.log(decode)\r\n  store.dispatch(changeAuth(decode));\r\n}\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router history={history}>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n\r\nexport default store;\r\n"],"sourceRoot":""}